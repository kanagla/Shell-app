"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkshell_app"] = self["webpackChunkshell_app"] || []).push([["src_bootstrap_tsx-webpack_sharing_consume_default_react-dom_react-dom"],{

/***/ "./src/bootstrap.tsx":
/*!***************************!*\
  !*** ./src/bootstrap.tsx ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadBookstoreApp: () => (/* binding */ loadBookstoreApp),\n/* harmony export */   loadOrdersApp: () => (/* binding */ loadOrdersApp),\n/* harmony export */   loadRemoteEntry: () => (/* binding */ loadRemoteEntry)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom/client */ \"./node_modules/react-dom/client.js\");\n\n\n\n// Load a remoteEntry file dynamically (for Module Federation)\nfunction loadRemoteEntry(remoteUrl, scope) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.src = remoteUrl;\n    script.type = 'text/javascript';\n    script.async = true;\n    script.onload = () => {\n      console.log(`Remote entry loaded: ${remoteUrl}`);\n      resolve();\n    };\n    script.onerror = () => {\n      console.error(`Failed to load remote entry: ${remoteUrl}`);\n      reject(new Error(`Failed to load remote entry: ${remoteUrl}`));\n    };\n    document.head.appendChild(script);\n  });\n}\n\n// Load Orders app (Module Federation)\nasync function loadOrdersApp() {\n  try {\n    const manifestRes = await fetch('/manifest.json');\n    const manifest = await manifestRes.json();\n    const remoteUrl = manifest.orders.remoteEntry;\n    await __webpack_require__.I('default');\n    await loadRemoteEntry(remoteUrl, 'ordersApp');\n    const container = window.ordersApp;\n    await container.init(__webpack_require__.S.default);\n    const factory = await container.get('./CartPage');\n    const OrdersApp = factory().default;\n    const root = react_dom_client__WEBPACK_IMPORTED_MODULE_1__.createRoot(document.getElementById('orders-root'));\n    root.render(/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(OrdersApp, null));\n  } catch (err) {\n    console.error('❌ Failed to load Orders App:', err);\n  }\n}\n\n// Load Bookstore app (via iframe)\nasync function loadBookstoreApp() {\n  try {\n    const manifestRes = await fetch('/manifest.json');\n    const manifest = await manifestRes.json();\n    const bookstoreUrl = manifest.bookstore.url; // e.g., http://localhost:3000/dashboard\n\n    const iframe = document.createElement('iframe');\n    iframe.src = bookstoreUrl;\n    iframe.style.width = '80%';\n    iframe.style.height = '80vh';\n    iframe.style.border = 'none';\n    iframe.title = 'Bookstore App';\n    iframe.id = 'bookstore-iframe';\n\n    // Append iframe to container\n    const container = document.getElementById('bookstore-root');\n    if (container) {\n      container.innerHTML = '';\n      container.appendChild(iframe);\n    } else {\n      console.error('bookstore-root element not found');\n      return;\n    }\n    iframe.onload = ev => {\n      const payload = {\n        source: 'shell',\n        payload: {\n          name: 'Surya',\n          role: 'admin'\n        }\n      };\n      const send = () => {\n        console.log('📤 Sending message to Bookstore...');\n        iframe.contentWindow?.postMessage(payload, 'http://localhost:3000');\n      };\n      send();\n      setTimeout(send, 300);\n      setTimeout(send, 1000);\n    };\n  } catch (err) {\n    console.error('Failed to load Bookstore App:', err);\n  }\n}\n\n// Listen for messages from iframe\nwindow.addEventListener('message', event => {\n  console.log('eventData', event.data);\n  if (event.data?.source === 'bookstore') {\n    console.log('📨 Message from Bookstore:', event.data.payload);\n  }\n});\n\n// Call both loaders\nloadOrdersApp();\nloadBookstoreApp();\n\n\n\n//# sourceURL=webpack://shell-app/./src/bootstrap.tsx?\n}");

/***/ })

}]);